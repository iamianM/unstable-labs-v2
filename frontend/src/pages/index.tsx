import { type NextPage } from "next";
import React from "react";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { usePrepareContractWrite, useContractWrite, useWaitForTransaction, useAccount } from "wagmi"
import vialContractInfo from "@abi/vial.json"
import Vials from "@components/Vials";
import type { Vial, Style, Request, Progress } from "../types/types"
import { useQuery, useQueryClient } from 'react-query'
import { checkProgress, getImages, text2Image } from "@utils/stableDiffusion"
import axios from "axios";
import { trpc } from "../utils/trpc";
import TxHash from "@components/TxHash";
import ResultCarousel from "@components/ResultCarousel";

const Home: NextPage = () => {

  const { address } = useAccount()
  const [vialToBurn, setVialToBurn] = React.useState<Vial | undefined>(undefined);
  const [request, setRequest] = React.useState<Request | undefined>(undefined)
  const [progress, setProgress] = React.useState<Progress | undefined>(undefined)
  const [selectedImage, setSelectedImage] = React.useState<string>('')
  const [prompt, setPrompt] = React.useState<string>('')

  const queryClient = useQueryClient()

  const { data: progressData } = useQuery("progress", () => checkProgress(request as Request), {
    enabled: !!request && (progress?.state.done === false || progress === undefined),
    refetchInterval: 1000,
    onSuccess(data) {
      setProgress(data)
    },
  })

  const { data: images } = useQuery("images", () => getImages(request as Request), {
    enabled: !!progress && !!request && progress.state.done,
    onSuccess: () => {
      setRequest(undefined)
      setProgress(undefined)
    }
  })

  const { config } = usePrepareContractWrite({
    address: vialContractInfo.address,
    abi: vialContractInfo.abi,
    functionName: 'burnVial',
    args: [vialToBurn?.tokenId],
    enabled: !!vialToBurn,
    onSuccess(data) {
      console.log('Success', data)
    },
    onError(error) {
      console.log('Error', error)
    }
  })

  const { data: burnData, write: burnVial } = useContractWrite(config)

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    if (!vialToBurn) return
    burnVial?.()
  }

  useWaitForTransaction({
    hash: burnData?.hash,
    enabled: !!burnData?.hash,
    onSuccess: async () => {
      const req: Request = await text2Image(prompt, vialToBurn?.style as string)
      setRequest(req)
      setVialToBurn(undefined)
      queryClient.invalidateQueries(`your-vials, ${address}`)
    }
  })


  const selectVialModal = (
    <>
      <input type="checkbox" id="select-vial-modal" className="modal-toggle" />
      <div className="modal">
        <div className="w-2/3 h-1/3">
          <label htmlFor="select-vial-modal" className="font-pixel text-2xl text-white cursor-pointer"
            onClick={() => setVialToBurn(undefined)}>X</label>
          <div className="bg-gray-400 bg-opacity-50 backdrop-blur-xl p-8">
            <Vials setVialToBurn={setVialToBurn} vialToBurn={vialToBurn} />
            <div className="flex sm:text-center justify-end">
              <label htmlFor="select-vial-modal"
                className="p-2 border-acid border-2 w-fit font-pixel text-lg text-white cursor-pointer hover:bg-slate-400">Select</label>
            </div>
          </div>
        </div>
      </div>
    </>
  )


  return (
    <>
      <Head>
        <title>UnstableLabs</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/flask.png" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center space-y-10 justify-center p-4">
        {selectVialModal}
        <div className="relative ">
          <img src="/lab-top.png" alt="lab-top" className="w-full" />
          <div className="w-full absolute bg-black bottom-1/2 ">
            <p className="font-bold text-3xl text-white text-center">Welcome to <span className="text-acid">Unstable</span>Labs!</p>
            <p className="font-bold text-lg text-gray-400 text-center">a lab to brew AI-generated NFTs</p>
          </div>
        </div>
        <div className="flex mt-10 justify-center items-center ">
          <p className="font-bold text-3xl text-white">Step into the Brewery</p>
        </div>
        <img src="/brewery-animated.gif" className="w-72 mx-auto mt-16" />
        <div className="bg-gray-400 p-6 w-2/3 mx-auto mt-16 row-start-3 col-start-3">
          {vialToBurn && <p className="text-[0.5rem] text-black">{vialToBurn.name}</p>}
          <div className="flex items-center space-x-3 justify-between">
            <label htmlFor="select-vial-modal" className="cursor-pointer" >
              <div className="h-12 w-12 border-2 border-acid bg-white">
                {vialToBurn && <img src={vialToBurn.image} alt="vial" className="p-1 h-12 w-12 object-contain" />}
              </div>
            </label>
            {!vialToBurn && <p className="pt-2 text-[0.6rem] text-red-500">Please select a vial to start</p>}
            {vialToBurn &&
              <form className='flex space-x-5 items-center' onSubmit={handleSubmit}>
                <input onChange={(e) => setPrompt(e.target.value)} className='w-full p-4 bg-white text-black outline-none font-pixel' required placeholder="prompt..." />
                <button type="submit" className="p-4 bg-acid text-white">Brew</button>
                {burnData && <TxHash hash={burnData?.hash} />}
              </form>
            }
          </div>
        </div>
        <div className="container mx-auto">
          {progressData?.eta_relative ? <p className="font-pixel text-sm text-center">Wait time: {progressData.eta_relative.toFixed(0)}s</p> : null}
          {images ? <ResultCarousel images={images} /> : null}
        </div>
      </main>
    </>
  );
};

export default Home;

// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-2">
//       {sessionData && (
//         <p className="text-2xl text-blue-500">
//           Logged in as {sessionData?.user?.name}
//         </p>
//       )}
//       {secretMessage && (
//         <p className="text-2xl text-blue-500">{secretMessage}</p>
//       )}
//       <button
//         className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
//         onClick={sessionData ? () => signOut() : () => signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};


